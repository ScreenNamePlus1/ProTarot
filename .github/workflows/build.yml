name: Build Kivy APK

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build the APK
        run: |
          # Install all necessary dependencies in one go
          sudo apt update
          sudo apt install -y git zip unzip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev automake
          pip install --user --upgrade cython virtualenv buildozer python-for-android

          # Use the explicit path for the python and buildozer executables to avoid PATH issues.
          # We find the exact python executable that was used to install the packages.
          PYTHON_EXECUTABLE=$(python -c 'import sys; print(sys.executable)')

          # Create a dummy SDK manager home directory
          mkdir -p "$HOME/.android"

          # Find the Android SDK path using the specific Python executable.
          # This ensures it finds the installed buildozer module.
          ANDROID_SDK_PATH=$($PYTHON_EXECUTABLE -c "import buildozer.android.platform.android; print(buildozer.android.platform.android.get_sdk_path())")
          
          # Accept all licenses
          yes | "$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager" --licenses || true

          # Build the APK using the specific buildozer executable
          "$HOME/.local/bin/buildozer" -v android debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: tarot-app-apk
          path: bin/tarot-app-*.apk
